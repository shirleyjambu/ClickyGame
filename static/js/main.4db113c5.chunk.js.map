{"version":3,"sources":["components/Wrapper/index.js","components/FlowerCard/flower.js","components/Game/display.js","components/Game/game.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","FlowerCard","alt","name","src","window","location","origin","image","onClick","Display","label","concat","clsName","Game","state","flowers","score","topScore","clickedItems","message","flowersArr","this","sort","b","Math","random","setState","id","_this$state","includes","tempArr","push","length","shuffle","_this2","_this$state2","display","components_Wrapper","map","flower","components_FlowerCard_flower","key","handleClick","Component","App","game","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k0BAOeA,MAJf,SAAiBC,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,iBCU1BC,MAVf,SAAoBN,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAMQ,KAAMC,IAAKC,OAAOC,SAASC,OAAS,kBAAmBZ,EAAMa,MAAOC,QAASd,EAAMc,aCE5FC,MARf,SAAiBf,GACf,OACEC,EAAAC,EAAAC,cAAA,WACCH,EAAMgB,MAAMf,EAAAC,EAAAC,cAAA,QAAMC,UAAS,QAAAa,OAAUjB,EAAMkB,UAAYlB,EAAMK,YCkGnDc,6MA/FbC,MAAQ,CACNC,QAAUA,EACVC,MAAO,EACPC,SAAW,EACXC,aAAc,GACdC,QAAU,GACVP,QAAU,6EAIV,IAAIQ,EAAaC,KAAKP,MAAMC,QAc5BK,EAAWE,KAAM,SAAS1B,EAAG2B,GAC3B,MAAO,GAAMC,KAAKC,WACpBJ,KAAKK,SAAS,CAACX,QAAUK,wCAGfO,GAAG,IAAAC,EAEsCP,KAAKP,MAAjDI,EAFMU,EAENV,aAAeH,EAFTa,EAESb,QAASE,EAFlBW,EAEkBX,SAAUD,EAF5BY,EAE4BZ,MAGzC,GAAIE,EAAaW,SAASF,GAoBxBN,KAAKK,SAAS,CACZT,SAAYD,EAAQC,EAAUD,EAAMC,EACpCD,MAAQ,EACRE,aAAe,GACfC,QAAU,kBACVP,QAAU,eAzBgB,CAC5B,IAAIkB,EAAUZ,EACdY,EAAQC,KAAKJ,GAEVG,EAAQE,SAAWjB,EAAQiB,OAC5BX,KAAKK,SAAS,CACZR,aAAc,GACdF,MAAQ,EACRG,QAAU,YACVP,QAAU,SAGZS,KAAKK,SAAS,CACZR,aAAcY,EACdd,MAAQA,EAAO,EACfG,QAAU,kBACVP,QAAU,YAahBS,KAAKY,2CAGE,IAAAC,EAAAb,KAAAc,EAC8Cd,KAAKP,MAAnDC,EADAoB,EACApB,QAASI,EADTgB,EACShB,QAASH,EADlBmB,EACkBnB,MAAOC,EADzBkB,EACyBlB,SAAUL,EADnCuB,EACmCvB,QACzC,OACGjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,eACAH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACuC,EAAD,CAASxB,QAASA,GAAUO,GAC5BxB,EAAAC,EAAAC,cAACuC,EAAD,CAAS1B,MAAM,SAASM,GACxBrB,EAAAC,EAAAC,cAACuC,EAAD,CAAS1B,MAAM,YAAYO,MAKjCtB,EAAAC,EAAAC,cAACwC,EAAD,KACCtB,EAAQuB,IAAK,SAAAC,GAAM,OAClB5C,EAAAC,EAAAC,cAAC2C,EAAD,CAAYC,IAAKF,EAAOZ,GACxBzB,KAAMqC,EAAOrC,KACbK,MAAOgC,EAAOhC,MACdC,QAAS,kBAAM0B,EAAKQ,YAAYH,EAAOZ,kBAxFhCgB,aCMJC,mLANV,OACGjD,EAAAC,EAAAC,cAACgD,EAAD,aAHUF,aCQEG,QACW,cAA7B1C,OAAOC,SAAS0C,UAEe,UAA7B3C,OAAOC,SAAS0C,UAEhB3C,OAAOC,SAAS0C,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4db113c5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./flower.css\";\r\n\r\n\r\nfunction FlowerCard(props) {\r\n  return (\r\n    <div className=\"col-3 card\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={window.location.origin + '/assets/images/'+ props.image} onClick={props.onClick}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FlowerCard;\r\n","import React from \"react\";\r\n\r\nfunction Display(props) {\r\n  return (\r\n    <div>\r\n    {props.label}<span className={`text-${props.clsName}`}>{props.children}</span>  \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Display;\r\n","import React, {Component} from 'react';\r\nimport flowers from \"./../../flowers.json\";\r\nimport Wrapper from \"./../Wrapper\";\r\nimport FlowerCard from \"./../FlowerCard/flower\";\r\nimport Display from \"./display\";\r\n\r\nclass Game extends Component {\r\n \r\n  state = {\r\n    flowers : flowers,\r\n    score :0,\r\n    topScore : 0,\r\n    clickedItems :[],\r\n    message : '',\r\n    clsName : ''\r\n  }\r\n\r\n  shuffle() {\r\n    let flowersArr = this.state.flowers;\r\n    /*let currentI = flowersArr.length;\r\n\r\n    while (0!== currentI){\r\n      let rI = Math.floor(Math.random() * currentI);\r\n      currentI -= 1;\r\n\r\n      //Swap the elements\r\n      let tPh = flowersArr[currentI];\r\n      flowersArr[currentI] = flowersArr[rI];\r\n      flowersArr[rI] = tPh;\r\n    } */\r\n\r\n    // The above can be replaced with ES6 \r\n    flowersArr.sort (function(a, b) {\r\n      return 0.5 - Math.random()});\r\n    this.setState({flowers : flowersArr}); \r\n  }\r\n\r\n  handleClick(id){\r\n    \r\n    const {clickedItems , flowers, topScore, score } = this.state;\r\n    //try using the .filter method of array\r\n\r\n    if(!clickedItems.includes(id)){\r\n      let tempArr = clickedItems;\r\n      tempArr.push(id);\r\n\r\n      if(tempArr.length === flowers.length){\r\n        this.setState({\r\n          clickedItems: [],\r\n          score : 0,\r\n          message : 'Game Over',\r\n          clsName : 'info'\r\n        });\r\n      }else{\r\n        this.setState({\r\n          clickedItems: tempArr,\r\n          score : score +1,\r\n          message : 'Guessed Correct',\r\n          clsName : 'success'\r\n        });\r\n      }\r\n    }else{\r\n      this.setState({\r\n        topScore : (score > topScore)?score:topScore,\r\n        score : 0,\r\n        clickedItems : [],\r\n        message : 'Oops, Try again',\r\n        clsName : 'danger'\r\n      });\r\n    }\r\n\r\n    this.shuffle();\r\n  }\r\n\r\n  render() {\r\n    const {flowers, message, score, topScore, clsName} = this.state;\r\n     return (\r\n        <div>\r\n          <nav className=\"text-center\">\r\n            <h1 className=\"title\">Clicky Game</h1>\r\n            <h4>\r\n              <div className=\"row\">\r\n                <Display clsName={clsName}>{message}</Display>\r\n                <Display label='Score'>{score}</Display>\r\n                <Display label='TopScore'>{topScore}</Display>\r\n              </div>\r\n              \r\n            </h4>\r\n          </nav>\r\n          <Wrapper>  \r\n          {flowers.map( flower =>\r\n            <FlowerCard key={flower.id}\r\n            name={flower.name}\r\n            image={flower.image}\r\n            onClick={() => this.handleClick(flower.id)}\r\n            />\r\n          )}\r\n          </Wrapper>\r\n        </div> \r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;","import React, {Component} from 'react';\nimport './App.css';\nimport Game from './components/Game/game'\n\nclass App extends Component {\n  render() {\n     return (\n        <Game/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}